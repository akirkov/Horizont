//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, внесенные в этот файл, могут привести к неверному выполнению кода и будут потеряны
//     в случае его повторного формирования.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Horizont.Elv.Model
{
    [DataContract(IsReference = true)]
    public partial class ChannelState: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Свойства-примитивы
    
        [DataMember]
        public int ChannelId
        {
            get { return _channelId; }
            set
            {
                if (_channelId != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("Свойство ChannelId является частью ключа объекта, поэтому его нельзя изменить. Ключевые свойства можно изменять только в тех случаях, когда объект не отслеживается или находится в состоянии добавления.");
                    }
                    _channelId = value;
                    OnPropertyChanged("ChannelId");
                }
            }
        }
        private int _channelId;
    
        [DataMember]
        public Nullable<bool> IsCall
        {
            get { return _isCall; }
            set
            {
                if (_isCall != value)
                {
                    _isCall = value;
                    OnPropertyChanged("IsCall");
                }
            }
        }
        private Nullable<bool> _isCall;
    
        [DataMember]
        public Nullable<System.DateTime> CallTime
        {
            get { return _callTime; }
            set
            {
                if (_callTime != value)
                {
                    _callTime = value;
                    OnPropertyChanged("CallTime");
                }
            }
        }
        private Nullable<System.DateTime> _callTime;
    
        [DataMember]
        public Nullable<bool> IsBlock
        {
            get { return _isBlock; }
            set
            {
                if (_isBlock != value)
                {
                    _isBlock = value;
                    OnPropertyChanged("IsBlock");
                }
            }
        }
        private Nullable<bool> _isBlock;
    
        [DataMember]
        public Nullable<System.DateTime> BlockTime
        {
            get { return _blockTime; }
            set
            {
                if (_blockTime != value)
                {
                    _blockTime = value;
                    OnPropertyChanged("BlockTime");
                }
            }
        }
        private Nullable<System.DateTime> _blockTime;
    
        [DataMember]
        public Nullable<bool> IsErrorOn
        {
            get { return _isErrorOn; }
            set
            {
                if (_isErrorOn != value)
                {
                    _isErrorOn = value;
                    OnPropertyChanged("IsErrorOn");
                }
            }
        }
        private Nullable<bool> _isErrorOn;
    
        [DataMember]
        public Nullable<bool> IsErrorOff
        {
            get { return _isErrorOff; }
            set
            {
                if (_isErrorOff != value)
                {
                    _isErrorOff = value;
                    OnPropertyChanged("IsErrorOff");
                }
            }
        }
        private Nullable<bool> _isErrorOff;
    
        [DataMember]
        public Nullable<int> SignalLevel
        {
            get { return _signalLevel; }
            set
            {
                if (_signalLevel != value)
                {
                    _signalLevel = value;
                    OnPropertyChanged("SignalLevel");
                }
            }
        }
        private Nullable<int> _signalLevel;
    
        [DataMember]
        public Nullable<bool> IsNoResponse
        {
            get { return _isNoResponse; }
            set
            {
                if (_isNoResponse != value)
                {
                    _isNoResponse = value;
                    OnPropertyChanged("IsNoResponse");
                }
            }
        }
        private Nullable<bool> _isNoResponse;
    
        [DataMember]
        public Nullable<System.DateTime> CheckTime
        {
            get { return _checkTime; }
            set
            {
                if (_checkTime != value)
                {
                    _checkTime = value;
                    OnPropertyChanged("CheckTime");
                }
            }
        }
        private Nullable<System.DateTime> _checkTime;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        // Этот тип сущности является зависимым концом как минимум в одной ассоциации, выполняющей каскадное удаление.
        // Этот обработчик события обрабатывает уведомления, создаваемые при удалении основного конца.
        internal void HandleCascadeDelete(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                this.MarkAsDeleted();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
