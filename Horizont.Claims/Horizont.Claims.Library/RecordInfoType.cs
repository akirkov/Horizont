//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, внесенные в этот файл, могут привести к неверному выполнению кода и будут потеряны
//     в случае его повторного формирования.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Horizont.Claims.Model
{
    
    public partial class RecordInfoType : INotifyComplexPropertyChanging, INotifyPropertyChanged
    {
        #region Свойства-примитивы
    
        [DataMember]
        public Nullable<System.DateTime> CreateTime
        {
            get { return _createTime; }
            set
            {
                if (_createTime != value)
                {
                    OnComplexPropertyChanging();
                    _createTime = value;
                    OnPropertyChanged("CreateTime");
                }
            }
        }
        private Nullable<System.DateTime> _createTime;
    
        [DataMember]
        public Nullable<System.DateTime> ChangeTime
        {
            get { return _changeTime; }
            set
            {
                if (_changeTime != value)
                {
                    OnComplexPropertyChanging();
                    _changeTime = value;
                    OnPropertyChanged("ChangeTime");
                }
            }
        }
        private Nullable<System.DateTime> _changeTime;
    
        [DataMember]
        public Nullable<System.DateTime> DeleteTime
        {
            get { return _deleteTime; }
            set
            {
                if (_deleteTime != value)
                {
                    OnComplexPropertyChanging();
                    _deleteTime = value;
                    OnPropertyChanged("DeleteTime");
                }
            }
        }
        private Nullable<System.DateTime> _deleteTime;
    
        [DataMember]
        public Nullable<System.DateTime> RecordTime
        {
            get { return _recordTime; }
            set
            {
                if (_recordTime != value)
                {
                    OnComplexPropertyChanging();
                    _recordTime = value;
                    OnPropertyChanged("RecordTime");
                }
            }
        }
        private Nullable<System.DateTime> _recordTime;
    
        [DataMember]
        public string CreateOperator
        {
            get { return _createOperator; }
            set
            {
                if (_createOperator != value)
                {
                    OnComplexPropertyChanging();
                    _createOperator = value;
                    OnPropertyChanged("CreateOperator");
                }
            }
        }
        private string _createOperator;
    
        [DataMember]
        public string ChangeOperator
        {
            get { return _changeOperator; }
            set
            {
                if (_changeOperator != value)
                {
                    OnComplexPropertyChanging();
                    _changeOperator = value;
                    OnPropertyChanged("ChangeOperator");
                }
            }
        }
        private string _changeOperator;
    
        [DataMember]
        public string DeleteOperator
        {
            get { return _deleteOperator; }
            set
            {
                if (_deleteOperator != value)
                {
                    OnComplexPropertyChanging();
                    _deleteOperator = value;
                    OnPropertyChanged("DeleteOperator");
                }
            }
        }
        private string _deleteOperator;
    
        [DataMember]
        public Nullable<bool> IsDeleted
        {
            get { return _isDeleted; }
            set
            {
                if (_isDeleted != value)
                {
                    OnComplexPropertyChanging();
                    _isDeleted = value;
                    OnPropertyChanged("IsDeleted");
                }
            }
        }
        private Nullable<bool> _isDeleted;

        #endregion

        #region ChangeTracking
    
        private void OnComplexPropertyChanging()
        {
            if (_complexPropertyChanging != null)
            {
                _complexPropertyChanging(this, new EventArgs());
            }
        }
    
        event EventHandler INotifyComplexPropertyChanging.ComplexPropertyChanging { add { _complexPropertyChanging += value; } remove { _complexPropertyChanging -= value; } }
        private event EventHandler _complexPropertyChanging;
    
        private void OnPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged { add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
    
        public static void RecordComplexOriginalValues(String parentPropertyName, RecordInfoType complexObject, ObjectChangeTracker changeTracker)
        {
            if (String.IsNullOrEmpty(parentPropertyName))
            {
                throw new ArgumentException("Строковый параметр не может быть пустым или иметь значение NULL.", "parentPropertyName");
            }
    
            if (changeTracker == null)
            {
                throw new ArgumentNullException("changeTracker");
            }
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CreateTime", parentPropertyName), complexObject == null ? null : (object)complexObject.CreateTime);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ChangeTime", parentPropertyName), complexObject == null ? null : (object)complexObject.ChangeTime);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.DeleteTime", parentPropertyName), complexObject == null ? null : (object)complexObject.DeleteTime);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.RecordTime", parentPropertyName), complexObject == null ? null : (object)complexObject.RecordTime);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.CreateOperator", parentPropertyName), complexObject == null ? null : (object)complexObject.CreateOperator);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.ChangeOperator", parentPropertyName), complexObject == null ? null : (object)complexObject.ChangeOperator);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.DeleteOperator", parentPropertyName), complexObject == null ? null : (object)complexObject.DeleteOperator);
            changeTracker.RecordOriginalValue(String.Format(CultureInfo.InvariantCulture, "{0}.IsDeleted", parentPropertyName), complexObject == null ? null : (object)complexObject.IsDeleted);
        }

        #endregion

    }
}
