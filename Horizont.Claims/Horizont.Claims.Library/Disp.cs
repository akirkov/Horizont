//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, внесенные в этот файл, могут привести к неверному выполнению кода и будут потеряны
//     в случае его повторного формирования.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Horizont.Claims.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(CessationClaim))]
    [KnownType(typeof(CommonClaim))]
    [KnownType(typeof(Executor))]
    [KnownType(typeof(LiftClaim))]
    [KnownType(typeof(Address))]
    [KnownType(typeof(Journal))]
    [KnownType(typeof(Region))]
    [KnownType(typeof(Address2Journals))]
    public partial class Disp: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Свойства-примитивы
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("Свойство Id является частью ключа объекта, поэтому его нельзя изменить. Ключевые свойства можно изменять только в тех случаях, когда объект не отслеживается или находится в состоянии добавления.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string DispGuid
        {
            get { return _dispGuid; }
            set
            {
                if (_dispGuid != value)
                {
                    _dispGuid = value;
                    OnPropertyChanged("DispGuid");
                }
            }
        }
        private string _dispGuid;
    
        [DataMember]
        public Nullable<int> RegionId
        {
            get { return _regionId; }
            set
            {
                if (_regionId != value)
                {
                    ChangeTracker.RecordOriginalValue("RegionId", _regionId);
                    if (!IsDeserializing)
                    {
                        if (Region != null && Region.Id != value)
                        {
                            Region = null;
                        }
                    }
                    _regionId = value;
                    OnPropertyChanged("RegionId");
                }
            }
        }
        private Nullable<int> _regionId;
    
        [DataMember]
        public string Address
        {
            get { return _address; }
            set
            {
                if (_address != value)
                {
                    _address = value;
                    OnPropertyChanged("Address");
                }
            }
        }
        private string _address;
    
        [DataMember]
        public string Phone
        {
            get { return _phone; }
            set
            {
                if (_phone != value)
                {
                    _phone = value;
                    OnPropertyChanged("Phone");
                }
            }
        }
        private string _phone;

        #endregion

        #region Сложные свойства
    
        [DataMember]
        public RecordInfoType RecordInfo
        {
            get
            {
                if (!_recordInfoInitialized && _recordInfo == null)
                {
                    _recordInfo = new RecordInfoType();
                    ((INotifyComplexPropertyChanging)_recordInfo).ComplexPropertyChanging += HandleRecordInfoChanging;
                }
                _recordInfoInitialized = true;
                return _recordInfo;
            }
            set
            {
                _recordInfoInitialized = true;
                if (!Equals(_recordInfo, value))
                {
                    if (_recordInfo != null)
                    {
                        ((INotifyComplexPropertyChanging)_recordInfo).ComplexPropertyChanging -= HandleRecordInfoChanging;
                    }
    
                    HandleRecordInfoChanging(this, null);
                    _recordInfo = value;
                    OnPropertyChanged("RecordInfo");
    
                    if (value != null)
                    {
                        ((INotifyComplexPropertyChanging)_recordInfo).ComplexPropertyChanging += HandleRecordInfoChanging;
                    }
                }
            }
        }
        private RecordInfoType _recordInfo;
        private bool _recordInfoInitialized;

        #endregion

        #region Свойства навигации
    
        [DataMember]
        public TrackableCollection<CessationClaim> CessationClaims
        {
            get
            {
                if (_cessationClaims == null)
                {
                    _cessationClaims = new TrackableCollection<CessationClaim>();
                    _cessationClaims.CollectionChanged += FixupCessationClaims;
                }
                return _cessationClaims;
            }
            set
            {
                if (!ReferenceEquals(_cessationClaims, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Не удается задать FixupChangeTrackingCollection, если включено ChangeTracking");
                    }
                    if (_cessationClaims != null)
                    {
                        _cessationClaims.CollectionChanged -= FixupCessationClaims;
                    }
                    _cessationClaims = value;
                    if (_cessationClaims != null)
                    {
                        _cessationClaims.CollectionChanged += FixupCessationClaims;
                    }
                    OnNavigationPropertyChanged("CessationClaims");
                }
            }
        }
        private TrackableCollection<CessationClaim> _cessationClaims;
    
        [DataMember]
        public TrackableCollection<CommonClaim> CommonClaims
        {
            get
            {
                if (_commonClaims == null)
                {
                    _commonClaims = new TrackableCollection<CommonClaim>();
                    _commonClaims.CollectionChanged += FixupCommonClaims;
                }
                return _commonClaims;
            }
            set
            {
                if (!ReferenceEquals(_commonClaims, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Не удается задать FixupChangeTrackingCollection, если включено ChangeTracking");
                    }
                    if (_commonClaims != null)
                    {
                        _commonClaims.CollectionChanged -= FixupCommonClaims;
                    }
                    _commonClaims = value;
                    if (_commonClaims != null)
                    {
                        _commonClaims.CollectionChanged += FixupCommonClaims;
                    }
                    OnNavigationPropertyChanged("CommonClaims");
                }
            }
        }
        private TrackableCollection<CommonClaim> _commonClaims;
    
        [DataMember]
        public TrackableCollection<Executor> Executors
        {
            get
            {
                if (_executors == null)
                {
                    _executors = new TrackableCollection<Executor>();
                    _executors.CollectionChanged += FixupExecutors;
                }
                return _executors;
            }
            set
            {
                if (!ReferenceEquals(_executors, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Не удается задать FixupChangeTrackingCollection, если включено ChangeTracking");
                    }
                    if (_executors != null)
                    {
                        _executors.CollectionChanged -= FixupExecutors;
                    }
                    _executors = value;
                    if (_executors != null)
                    {
                        _executors.CollectionChanged += FixupExecutors;
                    }
                    OnNavigationPropertyChanged("Executors");
                }
            }
        }
        private TrackableCollection<Executor> _executors;
    
        [DataMember]
        public TrackableCollection<LiftClaim> LiftClaims
        {
            get
            {
                if (_liftClaims == null)
                {
                    _liftClaims = new TrackableCollection<LiftClaim>();
                    _liftClaims.CollectionChanged += FixupLiftClaims;
                }
                return _liftClaims;
            }
            set
            {
                if (!ReferenceEquals(_liftClaims, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Не удается задать FixupChangeTrackingCollection, если включено ChangeTracking");
                    }
                    if (_liftClaims != null)
                    {
                        _liftClaims.CollectionChanged -= FixupLiftClaims;
                    }
                    _liftClaims = value;
                    if (_liftClaims != null)
                    {
                        _liftClaims.CollectionChanged += FixupLiftClaims;
                    }
                    OnNavigationPropertyChanged("LiftClaims");
                }
            }
        }
        private TrackableCollection<LiftClaim> _liftClaims;
    
        [DataMember]
        public TrackableCollection<Address> Addresses
        {
            get
            {
                if (_addresses == null)
                {
                    _addresses = new TrackableCollection<Address>();
                    _addresses.CollectionChanged += FixupAddresses;
                }
                return _addresses;
            }
            set
            {
                if (!ReferenceEquals(_addresses, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Не удается задать FixupChangeTrackingCollection, если включено ChangeTracking");
                    }
                    if (_addresses != null)
                    {
                        _addresses.CollectionChanged -= FixupAddresses;
                    }
                    _addresses = value;
                    if (_addresses != null)
                    {
                        _addresses.CollectionChanged += FixupAddresses;
                    }
                    OnNavigationPropertyChanged("Addresses");
                }
            }
        }
        private TrackableCollection<Address> _addresses;
    
        [DataMember]
        public TrackableCollection<Journal> Journals
        {
            get
            {
                if (_journals == null)
                {
                    _journals = new TrackableCollection<Journal>();
                    _journals.CollectionChanged += FixupJournals;
                }
                return _journals;
            }
            set
            {
                if (!ReferenceEquals(_journals, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Не удается задать FixupChangeTrackingCollection, если включено ChangeTracking");
                    }
                    if (_journals != null)
                    {
                        _journals.CollectionChanged -= FixupJournals;
                    }
                    _journals = value;
                    if (_journals != null)
                    {
                        _journals.CollectionChanged += FixupJournals;
                    }
                    OnNavigationPropertyChanged("Journals");
                }
            }
        }
        private TrackableCollection<Journal> _journals;
    
        [DataMember]
        public Region Region
        {
            get { return _region; }
            set
            {
                if (!ReferenceEquals(_region, value))
                {
                    var previousValue = _region;
                    _region = value;
                    FixupRegion(previousValue);
                    OnNavigationPropertyChanged("Region");
                }
            }
        }
        private Region _region;
    
        [DataMember]
        public TrackableCollection<Address2Journals> Address2Journals
        {
            get
            {
                if (_address2Journals == null)
                {
                    _address2Journals = new TrackableCollection<Address2Journals>();
                    _address2Journals.CollectionChanged += FixupAddress2Journals;
                }
                return _address2Journals;
            }
            set
            {
                if (!ReferenceEquals(_address2Journals, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Не удается задать FixupChangeTrackingCollection, если включено ChangeTracking");
                    }
                    if (_address2Journals != null)
                    {
                        _address2Journals.CollectionChanged -= FixupAddress2Journals;
                        // Это основной конец в ассоциации, выполняющей каскадные удаления.
                        // Удалите обработчик события каскадного удаления для всех сущностей в текущей коллекции.
                        foreach (Address2Journals item in _address2Journals)
                        {
                            ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                        }
                    }
                    _address2Journals = value;
                    if (_address2Journals != null)
                    {
                        _address2Journals.CollectionChanged += FixupAddress2Journals;
                        // Это основной конец в ассоциации, выполняющей каскадные удаления.
                        // Добавьте обработчик события каскадного удаления для всех сущностей, уже присутствующих в новой коллекции.
                        foreach (Address2Journals item in _address2Journals)
                        {
                            ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                        }
                    }
                    OnNavigationPropertyChanged("Address2Journals");
                }
            }
        }
        private TrackableCollection<Address2Journals> _address2Journals;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
        // Записывает исходные значения для сложного свойства RecordInfo
        private void HandleRecordInfoChanging(object sender, EventArgs args)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
        }
    
    
        protected virtual void ClearNavigationProperties()
        {
            CessationClaims.Clear();
            CommonClaims.Clear();
            Executors.Clear();
            LiftClaims.Clear();
            Addresses.Clear();
            Journals.Clear();
            Region = null;
            Address2Journals.Clear();
        }

        #endregion

        #region Исправление ассоциаций
    
        private void FixupRegion(Region previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.Disps.Contains(this))
            {
                previousValue.Disps.Remove(this);
            }
    
            if (Region != null)
            {
                if (!Region.Disps.Contains(this))
                {
                    Region.Disps.Add(this);
                }
    
                RegionId = Region.Id;
            }
            else if (!skipKeys)
            {
                RegionId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Region")
                    && (ChangeTracker.OriginalValues["Region"] == Region))
                {
                    ChangeTracker.OriginalValues.Remove("Region");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Region", previousValue);
                }
                if (Region != null && !Region.ChangeTracker.ChangeTrackingEnabled)
                {
                    Region.StartTracking();
                }
            }
        }
    
        private void FixupCessationClaims(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CessationClaim item in e.NewItems)
                {
                    item.Disp = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CessationClaims", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CessationClaim item in e.OldItems)
                {
                    if (ReferenceEquals(item.Disp, this))
                    {
                        item.Disp = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CessationClaims", item);
                    }
                }
            }
        }
    
        private void FixupCommonClaims(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (CommonClaim item in e.NewItems)
                {
                    item.Disp = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("CommonClaims", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CommonClaim item in e.OldItems)
                {
                    if (ReferenceEquals(item.Disp, this))
                    {
                        item.Disp = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("CommonClaims", item);
                    }
                }
            }
        }
    
        private void FixupExecutors(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Executor item in e.NewItems)
                {
                    item.Disp = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Executors", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Executor item in e.OldItems)
                {
                    if (ReferenceEquals(item.Disp, this))
                    {
                        item.Disp = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Executors", item);
                    }
                }
            }
        }
    
        private void FixupLiftClaims(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (LiftClaim item in e.NewItems)
                {
                    item.Disp = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("LiftClaims", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LiftClaim item in e.OldItems)
                {
                    if (ReferenceEquals(item.Disp, this))
                    {
                        item.Disp = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("LiftClaims", item);
                    }
                }
            }
        }
    
        private void FixupAddresses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Address item in e.NewItems)
                {
                    if (!item.Disps.Contains(this))
                    {
                        item.Disps.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Addresses", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Address item in e.OldItems)
                {
                    if (item.Disps.Contains(this))
                    {
                        item.Disps.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Addresses", item);
                    }
                }
            }
        }
    
        private void FixupJournals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Journal item in e.NewItems)
                {
                    if (!item.Disps.Contains(this))
                    {
                        item.Disps.Add(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Journals", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Journal item in e.OldItems)
                {
                    if (item.Disps.Contains(this))
                    {
                        item.Disps.Remove(this);
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Journals", item);
                    }
                }
            }
        }
    
        private void FixupAddress2Journals(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Address2Journals item in e.NewItems)
                {
                    item.Disp = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Address2Journals", item);
                    }
                    // Это основной конец в ассоциации, выполняющей каскадные удаления.
                    // Обновите приемник событий с использованием ссылки на новый зависимый объект.
                    ChangeTracker.ObjectStateChanging += item.HandleCascadeDelete;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Address2Journals item in e.OldItems)
                {
                    if (ReferenceEquals(item.Disp, this))
                    {
                        item.Disp = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Address2Journals", item);
                        // Удалите зависимый конец этой идентифицирующей ассоциации. Если текущее состояние - Added,
                        // разрешите изменение связи без удаления зависимого элемента.
                        if (item.ChangeTracker.State != ObjectState.Added)
                        {
                            item.MarkAsDeleted();
                        }
                    }
                    // Это основной конец в ассоциации, выполняющей каскадные удаления.
                    // Удалите предыдущий зависимый элемент из приемника событий.
                    ChangeTracker.ObjectStateChanging -= item.HandleCascadeDelete;
                }
            }
        }

        #endregion

    }
}
