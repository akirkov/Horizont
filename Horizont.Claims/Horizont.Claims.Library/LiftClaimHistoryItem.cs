//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, внесенные в этот файл, могут привести к неверному выполнению кода и будут потеряны
//     в случае его повторного формирования.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Horizont.Claims.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Address))]
    [KnownType(typeof(Disp))]
    [KnownType(typeof(LiftClaim))]
    public partial class LiftClaimHistoryItem: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Свойства-примитивы
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("Свойство Id является частью ключа объекта, поэтому его нельзя изменить. Ключевые свойства можно изменять только в тех случаях, когда объект не отслеживается или находится в состоянии добавления.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public Nullable<int> ClaimId
        {
            get { return _claimId; }
            set
            {
                if (_claimId != value)
                {
                    ChangeTracker.RecordOriginalValue("ClaimId", _claimId);
                    if (!IsDeserializing)
                    {
                        if (LiftClaims != null && LiftClaims.Id != value)
                        {
                            LiftClaims = null;
                        }
                    }
                    _claimId = value;
                    OnPropertyChanged("ClaimId");
                }
            }
        }
        private Nullable<int> _claimId;
    
        [DataMember]
        public Nullable<int> AddressId
        {
            get { return _addressId; }
            set
            {
                if (_addressId != value)
                {
                    ChangeTracker.RecordOriginalValue("AddressId", _addressId);
                    if (!IsDeserializing)
                    {
                        if (Address != null && Address.Id != value)
                        {
                            Address = null;
                        }
                    }
                    _addressId = value;
                    OnPropertyChanged("AddressId");
                }
            }
        }
        private Nullable<int> _addressId;
    
        [DataMember]
        public Nullable<int> Doorway
        {
            get { return _doorway; }
            set
            {
                if (_doorway != value)
                {
                    _doorway = value;
                    OnPropertyChanged("Doorway");
                }
            }
        }
        private Nullable<int> _doorway;
    
        [DataMember]
        public Nullable<int> LiftType
        {
            get { return _liftType; }
            set
            {
                if (_liftType != value)
                {
                    _liftType = value;
                    OnPropertyChanged("LiftType");
                }
            }
        }
        private Nullable<int> _liftType;
    
        [DataMember]
        public string Code
        {
            get { return _code; }
            set
            {
                if (_code != value)
                {
                    _code = value;
                    OnPropertyChanged("Code");
                }
            }
        }
        private string _code;
    
        [DataMember]
        public string LiftFailureStr
        {
            get { return _liftFailureStr; }
            set
            {
                if (_liftFailureStr != value)
                {
                    _liftFailureStr = value;
                    OnPropertyChanged("LiftFailureStr");
                }
            }
        }
        private string _liftFailureStr;
    
        [DataMember]
        public Nullable<int> Floor
        {
            get { return _floor; }
            set
            {
                if (_floor != value)
                {
                    _floor = value;
                    OnPropertyChanged("Floor");
                }
            }
        }
        private Nullable<int> _floor;
    
        [DataMember]
        public Nullable<bool> IsJam
        {
            get { return _isJam; }
            set
            {
                if (_isJam != value)
                {
                    _isJam = value;
                    OnPropertyChanged("IsJam");
                }
            }
        }
        private Nullable<bool> _isJam;
    
        [DataMember]
        public Nullable<bool> IsStay
        {
            get { return _isStay; }
            set
            {
                if (_isStay != value)
                {
                    _isStay = value;
                    OnPropertyChanged("IsStay");
                }
            }
        }
        private Nullable<bool> _isStay;
    
        [DataMember]
        public string ReceivedOperator
        {
            get { return _receivedOperator; }
            set
            {
                if (_receivedOperator != value)
                {
                    _receivedOperator = value;
                    OnPropertyChanged("ReceivedOperator");
                }
            }
        }
        private string _receivedOperator;
    
        [DataMember]
        public Nullable<System.DateTime> ReceivedTime
        {
            get { return _receivedTime; }
            set
            {
                if (_receivedTime != value)
                {
                    _receivedTime = value;
                    OnPropertyChanged("ReceivedTime");
                }
            }
        }
        private Nullable<System.DateTime> _receivedTime;
    
        [DataMember]
        public Nullable<bool> IsLegate
        {
            get { return _isLegate; }
            set
            {
                if (_isLegate != value)
                {
                    _isLegate = value;
                    OnPropertyChanged("IsLegate");
                }
            }
        }
        private Nullable<bool> _isLegate;
    
        [DataMember]
        public Nullable<int> Result
        {
            get { return _result; }
            set
            {
                if (_result != value)
                {
                    _result = value;
                    OnPropertyChanged("Result");
                }
            }
        }
        private Nullable<int> _result;
    
        [DataMember]
        public Nullable<System.DateTime> ExecutedTime
        {
            get { return _executedTime; }
            set
            {
                if (_executedTime != value)
                {
                    _executedTime = value;
                    OnPropertyChanged("ExecutedTime");
                }
            }
        }
        private Nullable<System.DateTime> _executedTime;
    
        [DataMember]
        public string Reason
        {
            get { return _reason; }
            set
            {
                if (_reason != value)
                {
                    _reason = value;
                    OnPropertyChanged("Reason");
                }
            }
        }
        private string _reason;
    
        [DataMember]
        public string Typework
        {
            get { return _typework; }
            set
            {
                if (_typework != value)
                {
                    _typework = value;
                    OnPropertyChanged("Typework");
                }
            }
        }
        private string _typework;
    
        [DataMember]
        public string Executor
        {
            get { return _executor; }
            set
            {
                if (_executor != value)
                {
                    _executor = value;
                    OnPropertyChanged("Executor");
                }
            }
        }
        private string _executor;
    
        [DataMember]
        public Nullable<bool> IsCheck
        {
            get { return _isCheck; }
            set
            {
                if (_isCheck != value)
                {
                    _isCheck = value;
                    OnPropertyChanged("IsCheck");
                }
            }
        }
        private Nullable<bool> _isCheck;
    
        [DataMember]
        public string ExecutedOperator
        {
            get { return _executedOperator; }
            set
            {
                if (_executedOperator != value)
                {
                    _executedOperator = value;
                    OnPropertyChanged("ExecutedOperator");
                }
            }
        }
        private string _executedOperator;
    
        [DataMember]
        public Nullable<int> DispId
        {
            get { return _dispId; }
            set
            {
                if (_dispId != value)
                {
                    ChangeTracker.RecordOriginalValue("DispId", _dispId);
                    if (!IsDeserializing)
                    {
                        if (Disp != null && Disp.Id != value)
                        {
                            Disp = null;
                        }
                    }
                    _dispId = value;
                    OnPropertyChanged("DispId");
                }
            }
        }
        private Nullable<int> _dispId;
    
        [DataMember]
        public string RegNumber
        {
            get { return _regNumber; }
            set
            {
                if (_regNumber != value)
                {
                    _regNumber = value;
                    OnPropertyChanged("RegNumber");
                }
            }
        }
        private string _regNumber;
    
        [DataMember]
        public Nullable<bool> IsSubmission
        {
            get { return _isSubmission; }
            set
            {
                if (_isSubmission != value)
                {
                    _isSubmission = value;
                    OnPropertyChanged("IsSubmission");
                }
            }
        }
        private Nullable<bool> _isSubmission;
    
        [DataMember]
        public string OrgName
        {
            get { return _orgName; }
            set
            {
                if (_orgName != value)
                {
                    _orgName = value;
                    OnPropertyChanged("OrgName");
                }
            }
        }
        private string _orgName;
    
        [DataMember]
        public string SubmissionOperator
        {
            get { return _submissionOperator; }
            set
            {
                if (_submissionOperator != value)
                {
                    _submissionOperator = value;
                    OnPropertyChanged("SubmissionOperator");
                }
            }
        }
        private string _submissionOperator;
    
        [DataMember]
        public Nullable<System.DateTime> SubmissionTime
        {
            get { return _submissionTime; }
            set
            {
                if (_submissionTime != value)
                {
                    _submissionTime = value;
                    OnPropertyChanged("SubmissionTime");
                }
            }
        }
        private Nullable<System.DateTime> _submissionTime;
    
        [DataMember]
        public string LiftFailureComment
        {
            get { return _liftFailureComment; }
            set
            {
                if (_liftFailureComment != value)
                {
                    _liftFailureComment = value;
                    OnPropertyChanged("LiftFailureComment");
                }
            }
        }
        private string _liftFailureComment;
    
        [DataMember]
        public Nullable<System.DateTime> ChangeTime
        {
            get { return _changeTime; }
            set
            {
                if (_changeTime != value)
                {
                    _changeTime = value;
                    OnPropertyChanged("ChangeTime");
                }
            }
        }
        private Nullable<System.DateTime> _changeTime;
    
        [DataMember]
        public string ChangeOperator
        {
            get { return _changeOperator; }
            set
            {
                if (_changeOperator != value)
                {
                    _changeOperator = value;
                    OnPropertyChanged("ChangeOperator");
                }
            }
        }
        private string _changeOperator;
    
        [DataMember]
        public Nullable<int> ChangeId
        {
            get { return _changeId; }
            set
            {
                if (_changeId != value)
                {
                    _changeId = value;
                    OnPropertyChanged("ChangeId");
                }
            }
        }
        private Nullable<int> _changeId;

        #endregion

        #region Свойства навигации
    
        [DataMember]
        public Address Address
        {
            get { return _address; }
            set
            {
                if (!ReferenceEquals(_address, value))
                {
                    var previousValue = _address;
                    _address = value;
                    FixupAddress(previousValue);
                    OnNavigationPropertyChanged("Address");
                }
            }
        }
        private Address _address;
    
        [DataMember]
        public Disp Disp
        {
            get { return _disp; }
            set
            {
                if (!ReferenceEquals(_disp, value))
                {
                    var previousValue = _disp;
                    _disp = value;
                    FixupDisp(previousValue);
                    OnNavigationPropertyChanged("Disp");
                }
            }
        }
        private Disp _disp;
    
        [DataMember]
        public LiftClaim LiftClaims
        {
            get { return _liftClaims; }
            set
            {
                if (!ReferenceEquals(_liftClaims, value))
                {
                    var previousValue = _liftClaims;
                    _liftClaims = value;
                    FixupLiftClaims(previousValue);
                    OnNavigationPropertyChanged("LiftClaims");
                }
            }
        }
        private LiftClaim _liftClaims;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
            Address = null;
            Disp = null;
            LiftClaims = null;
        }

        #endregion

        #region Исправление ассоциаций
    
        private void FixupAddress(Address previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (previousValue != null && previousValue.LiftClaimsHistories.Contains(this))
            {
                previousValue.LiftClaimsHistories.Remove(this);
            }
    
            if (Address != null)
            {
                if (!Address.LiftClaimsHistories.Contains(this))
                {
                    Address.LiftClaimsHistories.Add(this);
                }
    
                AddressId = Address.Id;
            }
            else if (!skipKeys)
            {
                AddressId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Address")
                    && (ChangeTracker.OriginalValues["Address"] == Address))
                {
                    ChangeTracker.OriginalValues.Remove("Address");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Address", previousValue);
                }
                if (Address != null && !Address.ChangeTracker.ChangeTrackingEnabled)
                {
                    Address.StartTracking();
                }
            }
        }
    
        private void FixupDisp(Disp previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (Disp != null)
            {
                DispId = Disp.Id;
            }
    
            else if (!skipKeys)
            {
                DispId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("Disp")
                    && (ChangeTracker.OriginalValues["Disp"] == Disp))
                {
                    ChangeTracker.OriginalValues.Remove("Disp");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("Disp", previousValue);
                }
                if (Disp != null && !Disp.ChangeTracker.ChangeTrackingEnabled)
                {
                    Disp.StartTracking();
                }
            }
        }
    
        private void FixupLiftClaims(LiftClaim previousValue, bool skipKeys = false)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (LiftClaims != null)
            {
                ClaimId = LiftClaims.Id;
            }
    
            else if (!skipKeys)
            {
                ClaimId = null;
            }
    
            if (ChangeTracker.ChangeTrackingEnabled)
            {
                if (ChangeTracker.OriginalValues.ContainsKey("LiftClaims")
                    && (ChangeTracker.OriginalValues["LiftClaims"] == LiftClaims))
                {
                    ChangeTracker.OriginalValues.Remove("LiftClaims");
                }
                else
                {
                    ChangeTracker.RecordOriginalValue("LiftClaims", previousValue);
                }
                if (LiftClaims != null && !LiftClaims.ChangeTracker.ChangeTrackingEnabled)
                {
                    LiftClaims.StartTracking();
                }
            }
        }

        #endregion

    }
}
