//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, внесенные в этот файл, могут привести к неверному выполнению кода и будут потеряны
//     в случае его повторного формирования.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Horizont.Claims.Model
{
    [DataContract(IsReference = true)]
    public partial class DataBaseSetting: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Свойства-примитивы
    
        [DataMember]
        public bool IsSync
        {
            get { return _isSync; }
            set
            {
                if (_isSync != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("Свойство IsSync является частью ключа объекта, поэтому его нельзя изменить. Ключевые свойства можно изменять только в тех случаях, когда объект не отслеживается или находится в состоянии добавления.");
                    }
                    _isSync = value;
                    OnPropertyChanged("IsSync");
                }
            }
        }
        private bool _isSync;
    
        [DataMember]
        public Nullable<int> DeleteAfterDays
        {
            get { return _deleteAfterDays; }
            set
            {
                if (_deleteAfterDays != value)
                {
                    _deleteAfterDays = value;
                    OnPropertyChanged("DeleteAfterDays");
                }
            }
        }
        private Nullable<int> _deleteAfterDays;
    
        [DataMember]
        public Nullable<System.DateTime> LastSyncTime
        {
            get { return _lastSyncTime; }
            set
            {
                if (_lastSyncTime != value)
                {
                    _lastSyncTime = value;
                    OnPropertyChanged("LastSyncTime");
                }
            }
        }
        private Nullable<System.DateTime> _lastSyncTime;
    
        [DataMember]
        public Nullable<int> HistoryDaysCount
        {
            get { return _historyDaysCount; }
            set
            {
                if (_historyDaysCount != value)
                {
                    _historyDaysCount = value;
                    OnPropertyChanged("HistoryDaysCount");
                }
            }
        }
        private Nullable<int> _historyDaysCount;
    
        [DataMember]
        public Nullable<bool> IsHistoryEnabled
        {
            get { return _isHistoryEnabled; }
            set
            {
                if (_isHistoryEnabled != value)
                {
                    _isHistoryEnabled = value;
                    OnPropertyChanged("IsHistoryEnabled");
                }
            }
        }
        private Nullable<bool> _isHistoryEnabled;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
    
        protected virtual void ClearNavigationProperties()
        {
        }

        #endregion

    }
}
