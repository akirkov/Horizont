//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, внесенные в этот файл, могут привести к неверному выполнению кода и будут потеряны
//     в случае его повторного формирования.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Globalization;
using System.Runtime.Serialization;

namespace Horizont.Claims.Model
{
    [DataContract(IsReference = true)]
    [KnownType(typeof(Disp))]
    [KnownType(typeof(Address))]
    [KnownType(typeof(EmployeeInfo))]
    public partial class Region: IObjectWithChangeTracker, INotifyPropertyChanged
    {
        #region Свойства-примитивы
    
        [DataMember]
        public int Id
        {
            get { return _id; }
            set
            {
                if (_id != value)
                {
                    if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
                    {
                        throw new InvalidOperationException("Свойство Id является частью ключа объекта, поэтому его нельзя изменить. Ключевые свойства можно изменять только в тех случаях, когда объект не отслеживается или находится в состоянии добавления.");
                    }
                    _id = value;
                    OnPropertyChanged("Id");
                }
            }
        }
        private int _id;
    
        [DataMember]
        public string Name
        {
            get { return _name; }
            set
            {
                if (_name != value)
                {
                    _name = value;
                    OnPropertyChanged("Name");
                }
            }
        }
        private string _name;
    
        [DataMember]
        public string Chief
        {
            get { return _chief; }
            set
            {
                if (_chief != value)
                {
                    _chief = value;
                    OnPropertyChanged("Chief");
                }
            }
        }
        private string _chief;
    
        [DataMember]
        public string RegionGuid
        {
            get { return _regionGuid; }
            set
            {
                if (_regionGuid != value)
                {
                    _regionGuid = value;
                    OnPropertyChanged("RegionGuid");
                }
            }
        }
        private string _regionGuid;

        #endregion

        #region Сложные свойства
    
        [DataMember]
        public RecordInfoType RecordInfo
        {
            get
            {
                if (!_recordInfoInitialized && _recordInfo == null)
                {
                    _recordInfo = new RecordInfoType();
                    ((INotifyComplexPropertyChanging)_recordInfo).ComplexPropertyChanging += HandleRecordInfoChanging;
                }
                _recordInfoInitialized = true;
                return _recordInfo;
            }
            set
            {
                _recordInfoInitialized = true;
                if (!Equals(_recordInfo, value))
                {
                    if (_recordInfo != null)
                    {
                        ((INotifyComplexPropertyChanging)_recordInfo).ComplexPropertyChanging -= HandleRecordInfoChanging;
                    }
    
                    HandleRecordInfoChanging(this, null);
                    _recordInfo = value;
                    OnPropertyChanged("RecordInfo");
    
                    if (value != null)
                    {
                        ((INotifyComplexPropertyChanging)_recordInfo).ComplexPropertyChanging += HandleRecordInfoChanging;
                    }
                }
            }
        }
        private RecordInfoType _recordInfo;
        private bool _recordInfoInitialized;

        #endregion

        #region Свойства навигации
    
        [DataMember]
        public TrackableCollection<Disp> Disps
        {
            get
            {
                if (_disps == null)
                {
                    _disps = new TrackableCollection<Disp>();
                    _disps.CollectionChanged += FixupDisps;
                }
                return _disps;
            }
            set
            {
                if (!ReferenceEquals(_disps, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Не удается задать FixupChangeTrackingCollection, если включено ChangeTracking");
                    }
                    if (_disps != null)
                    {
                        _disps.CollectionChanged -= FixupDisps;
                    }
                    _disps = value;
                    if (_disps != null)
                    {
                        _disps.CollectionChanged += FixupDisps;
                    }
                    OnNavigationPropertyChanged("Disps");
                }
            }
        }
        private TrackableCollection<Disp> _disps;
    
        [DataMember]
        public TrackableCollection<Address> Addresses
        {
            get
            {
                if (_addresses == null)
                {
                    _addresses = new TrackableCollection<Address>();
                    _addresses.CollectionChanged += FixupAddresses;
                }
                return _addresses;
            }
            set
            {
                if (!ReferenceEquals(_addresses, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Не удается задать FixupChangeTrackingCollection, если включено ChangeTracking");
                    }
                    if (_addresses != null)
                    {
                        _addresses.CollectionChanged -= FixupAddresses;
                    }
                    _addresses = value;
                    if (_addresses != null)
                    {
                        _addresses.CollectionChanged += FixupAddresses;
                    }
                    OnNavigationPropertyChanged("Addresses");
                }
            }
        }
        private TrackableCollection<Address> _addresses;
    
        [DataMember]
        public TrackableCollection<EmployeeInfo> Infoes
        {
            get
            {
                if (_infoes == null)
                {
                    _infoes = new TrackableCollection<EmployeeInfo>();
                    _infoes.CollectionChanged += FixupInfoes;
                }
                return _infoes;
            }
            set
            {
                if (!ReferenceEquals(_infoes, value))
                {
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        throw new InvalidOperationException("Не удается задать FixupChangeTrackingCollection, если включено ChangeTracking");
                    }
                    if (_infoes != null)
                    {
                        _infoes.CollectionChanged -= FixupInfoes;
                    }
                    _infoes = value;
                    if (_infoes != null)
                    {
                        _infoes.CollectionChanged += FixupInfoes;
                    }
                    OnNavigationPropertyChanged("Infoes");
                }
            }
        }
        private TrackableCollection<EmployeeInfo> _infoes;

        #endregion

        #region ChangeTracking
    
        protected virtual void OnPropertyChanged(String propertyName)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        protected virtual void OnNavigationPropertyChanged(String propertyName)
        {
            if (_propertyChanged != null)
            {
                _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
            }
        }
    
        event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged{ add { _propertyChanged += value; } remove { _propertyChanged -= value; } }
        private event PropertyChangedEventHandler _propertyChanged;
        private ObjectChangeTracker _changeTracker;
    
        [DataMember]
        public ObjectChangeTracker ChangeTracker
        {
            get
            {
                if (_changeTracker == null)
                {
                    _changeTracker = new ObjectChangeTracker();
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
                return _changeTracker;
            }
            set
            {
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
                }
                _changeTracker = value;
                if(_changeTracker != null)
                {
                    _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
                }
            }
        }
    
        private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
        {
            if (e.NewState == ObjectState.Deleted)
            {
                ClearNavigationProperties();
            }
        }
    
        protected bool IsDeserializing { get; private set; }
    
        [OnDeserializing]
        public void OnDeserializingMethod(StreamingContext context)
        {
            IsDeserializing = true;
        }
    
        [OnDeserialized]
        public void OnDeserializedMethod(StreamingContext context)
        {
            IsDeserializing = false;
            ChangeTracker.ChangeTrackingEnabled = true;
        }
        // Записывает исходные значения для сложного свойства RecordInfo
        private void HandleRecordInfoChanging(object sender, EventArgs args)
        {
            if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
            {
                ChangeTracker.State = ObjectState.Modified;
            }
        }
    
    
        protected virtual void ClearNavigationProperties()
        {
            Disps.Clear();
            Addresses.Clear();
            Infoes.Clear();
        }

        #endregion

        #region Исправление ассоциаций
    
        private void FixupDisps(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Disp item in e.NewItems)
                {
                    item.Region = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Disps", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Disp item in e.OldItems)
                {
                    if (ReferenceEquals(item.Region, this))
                    {
                        item.Region = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Disps", item);
                    }
                }
            }
        }
    
        private void FixupAddresses(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (Address item in e.NewItems)
                {
                    item.Region = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Addresses", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Address item in e.OldItems)
                {
                    if (ReferenceEquals(item.Region, this))
                    {
                        item.Region = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Addresses", item);
                    }
                }
            }
        }
    
        private void FixupInfoes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (IsDeserializing)
            {
                return;
            }
    
            if (e.NewItems != null)
            {
                foreach (EmployeeInfo item in e.NewItems)
                {
                    item.Region = this;
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        if (!item.ChangeTracker.ChangeTrackingEnabled)
                        {
                            item.StartTracking();
                        }
                        ChangeTracker.RecordAdditionToCollectionProperties("Infoes", item);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EmployeeInfo item in e.OldItems)
                {
                    if (ReferenceEquals(item.Region, this))
                    {
                        item.Region = null;
                    }
                    if (ChangeTracker.ChangeTrackingEnabled)
                    {
                        ChangeTracker.RecordRemovalFromCollectionProperties("Infoes", item);
                    }
                }
            }
        }

        #endregion

    }
}
